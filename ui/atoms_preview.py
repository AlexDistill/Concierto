#!/usr/bin/env python3
"""
Atoms Preview UI - Concierto Brand Generation

Generates an HTML preview of atoms/merged.json for QA of palettes, tags, objects, provenance.
Creates a visual dashboard for reviewing and validating processed atoms data.

Integrates with Concierto's brand synthesis system to provide comprehensive
visual feedback on the atom bus processing results.
"""

import json
import argparse
from pathlib import Path
from typing import Dict, List, Optional, Any
import os
import sys
from datetime import datetime
import html

# Add project root to path for imports
sys.path.append(str(Path(__file__).parent.parent))

class AtomsPreviewGenerator:
    """
    Generates HTML preview of atoms data for visual QA and validation
    """
    
    def __init__(self):
        self.css_styles = self._get_css_styles()
        
    def generate_preview(self, atoms_path: str, output_path: str = "ui/atoms_preview.html") -> str:
        """
        Main entry point - generates HTML preview of atoms
        
        Args:
            atoms_path: Path to atoms/merged.json file
            output_path: Where to save the HTML preview
            
        Returns:
            Path to generated HTML file
        """
        print(f"üìä Generating atoms preview from {atoms_path}...")
        
        # Load atoms data
        atoms = self._load_atoms(atoms_path)
        if not atoms:
            raise ValueError(f"Could not load atoms from {atoms_path}")
        
        # Generate HTML content
        html_content = self._generate_html(atoms, atoms_path)
        
        # Save HTML file
        output_file = self._save_html(html_content, output_path)
        
        print(f"‚úì Generated atoms preview: {output_file}")
        
        return output_file
    
    def _load_atoms(self, atoms_path: str) -> Optional[Dict]:
        """Load atoms data from JSON file"""
        try:
            with open(atoms_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading atoms: {e}")
            return None
    
    def _generate_html(self, atoms: Dict, atoms_path: str) -> str:
        """Generate complete HTML preview"""
        
        # Header and metadata
        header_section = self._generate_header(atoms, atoms_path)
        
        # Colors section
        colors_section = self._generate_colors_section(atoms.get('colors', {}))
        
        # Palettes section
        palettes_section = self._generate_palettes_section(atoms.get('palettes', []))
        
        # Tags section
        tags_section = self._generate_tags_section(atoms.get('tags', {}))
        
        # Objects section  
        objects_section = self._generate_objects_section(atoms.get('objects', []))
        
        # Themes section
        themes_section = self._generate_themes_section(atoms.get('themes', []))
        
        # Visual tone section
        visual_tone_section = self._generate_visual_tone_section(atoms.get('visual_tone', {}))
        
        # Provenance section
        provenance_section = self._generate_provenance_section(atoms.get('provenance', {}))
        
        # Source items section (collapsed by default)
        source_items_section = self._generate_source_items_section(atoms.get('source_items', []))
        
        html_content = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Atoms Preview - Concierto Brand System</title>
    <style>
        {self.css_styles}
    </style>
</head>
<body>
    <div class="container">
        {header_section}
        
        <div class="sections-grid">
            {colors_section}
            {palettes_section}
            {tags_section}
            {objects_section}
            {themes_section}
            {visual_tone_section}
            {provenance_section}
        </div>
        
        {source_items_section}
        
        <footer class="footer">
            <p>Generated by Concierto Atoms Preview ‚Ä¢ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
    
    <script>
        // Toggle source items visibility
        function toggleSourceItems() {{
            const section = document.getElementById('source-items-content');
            const button = document.querySelector('.toggle-button');
            
            if (section.style.display === 'none') {{
                section.style.display = 'block';
                button.textContent = 'üîº Hide Source Items';
            }} else {{
                section.style.display = 'none';
                button.textContent = 'üîΩ Show Source Items';
            }}
        }}
        
        // Copy color to clipboard
        function copyColor(color) {{
            navigator.clipboard.writeText(color).then(() => {{
                // Brief visual feedback
                const buttons = document.querySelectorAll('.color-chip');
                buttons.forEach(btn => {{
                    if (btn.getAttribute('data-color') === color) {{
                        btn.style.transform = 'scale(1.1)';
                        setTimeout(() => btn.style.transform = 'scale(1)', 150);
                    }}
                }});
            }});
        }}
    </script>
</body>
</html>'''
        
        return html_content
    
    def _generate_header(self, atoms: Dict, atoms_path: str) -> str:
        """Generate header section with metadata"""
        generated_at = atoms.get('generated_at', 'Unknown')
        source_count = atoms.get('source_count', 0)
        version = atoms.get('version', '1.0')
        
        return f'''
        <header class="header">
            <h1>üß¨ Atoms Preview</h1>
            <div class="metadata">
                <div class="metadata-item">
                    <strong>File:</strong> {os.path.basename(atoms_path)}
                </div>
                <div class="metadata-item">
                    <strong>Generated:</strong> {generated_at}
                </div>
                <div class="metadata-item">
                    <strong>Source Items:</strong> {source_count}
                </div>
                <div class="metadata-item">
                    <strong>Version:</strong> {version}
                </div>
            </div>
        </header>
        '''
    
    def _generate_colors_section(self, colors_data: Dict) -> str:
        """Generate colors overview section"""
        if not colors_data:
            return '<div class="section"><h2>üé® Colors</h2><p>No color data available</p></div>'
        
        primary_colors = colors_data.get('primary', [])
        total_unique = colors_data.get('total_unique', 0)
        
        colors_html = ''
        for i, color in enumerate(primary_colors[:8]):  # Show top 8
            hex_color = color.get('hex', '#000000')
            weight = color.get('total_weight', color.get('weight', 0))
            saturation = color.get('saturation', 0)
            brightness = color.get('brightness', 0)
            
            colors_html += f'''
            <div class="color-item">
                <div class="color-chip" data-color="{hex_color}" style="background-color: {hex_color}" onclick="copyColor('{hex_color}')"></div>
                <div class="color-info">
                    <div class="color-hex">{hex_color}</div>
                    <div class="color-stats">
                        <span>Weight: {weight:.2f}</span>
                        <span>Sat: {saturation:.2f}</span> 
                        <span>Bright: {brightness:.2f}</span>
                    </div>
                </div>
            </div>
            '''
        
        return f'''
        <div class="section">
            <h2>üé® Colors</h2>
            <div class="colors-grid">
                {colors_html}
            </div>
            <div class="section-meta">
                <small>Total unique colors: {total_unique} ‚Ä¢ Click colors to copy</small>
            </div>
        </div>
        '''
    
    def _generate_palettes_section(self, palettes_data: List) -> str:
        """Generate color palettes section"""
        if not palettes_data:
            return '<div class="section"><h2>üåà Palettes</h2><p>No palettes generated</p></div>'
        
        palettes_html = ''
        for palette in palettes_data:
            name = palette.get('name', 'Untitled')
            harmony = palette.get('harmony', 'unknown')
            confidence = palette.get('confidence', 0)
            colors = palette.get('colors', [])
            
            palette_colors_html = ''
            for color in colors:
                palette_colors_html += f'<div class="palette-color" style="background-color: {color}" onclick="copyColor(\'{color}\')"></div>'
            
            palettes_html += f'''
            <div class="palette-item">
                <div class="palette-header">
                    <span class="palette-name">{name.title()}</span>
                    <span class="palette-harmony">{harmony}</span>
                    <span class="palette-confidence">{confidence:.1f}</span>
                </div>
                <div class="palette-colors">
                    {palette_colors_html}
                </div>
            </div>
            '''
        
        return f'''
        <div class="section">
            <h2>üåà Palettes</h2>
            <div class="palettes-container">
                {palettes_html}
            </div>
        </div>
        '''
    
    def _generate_tags_section(self, tags_data: Dict) -> str:
        """Generate tags section"""
        if not tags_data:
            return '<div class="section"><h2>üè∑Ô∏è Tags</h2><p>No tags available</p></div>'
        
        canonical_tags = tags_data.get('canonical', [])
        total_unique = tags_data.get('total_unique', 0)
        
        tags_html = ''
        for tag_info in canonical_tags[:20]:  # Top 20 tags
            tag = tag_info.get('tag', 'unknown')
            frequency = tag_info.get('frequency', 0)
            weight = tag_info.get('weight', 0)
            
            # Size based on weight
            size_class = 'tag-large' if weight > 0.5 else 'tag-medium' if weight > 0.2 else 'tag-small'
            
            tags_html += f'''
            <span class="tag {size_class}" title="Frequency: {frequency}, Weight: {weight:.2f}">
                {html.escape(tag)}
            </span>
            '''
        
        return f'''
        <div class="section">
            <h2>üè∑Ô∏è Tags</h2>
            <div class="tags-cloud">
                {tags_html}
            </div>
            <div class="section-meta">
                <small>Showing top 20 of {total_unique} total tags</small>
            </div>
        </div>
        '''
    
    def _generate_objects_section(self, objects_data: List) -> str:
        """Generate objects section"""
        if not objects_data:
            return '<div class="section"><h2>üì¶ Objects</h2><p>No objects identified</p></div>'
        
        objects_html = ''
        for obj in objects_data:
            objects_html += f'<span class="object-tag">{html.escape(obj)}</span>'
        
        return f'''
        <div class="section">
            <h2>üì¶ Objects</h2>
            <div class="objects-container">
                {objects_html}
            </div>
        </div>
        '''
    
    def _generate_themes_section(self, themes_data: List) -> str:
        """Generate themes section"""
        if not themes_data:
            return '<div class="section"><h2>üé≠ Themes</h2><p>No themes identified</p></div>'
        
        themes_html = ''
        for theme in themes_data:
            theme_name = theme.get('theme', 'Unknown')
            confidence = theme.get('confidence', 0)
            evidence = theme.get('evidence', '')
            
            themes_html += f'''
            <div class="theme-item">
                <div class="theme-header">
                    <span class="theme-name">{theme_name.replace('-', ' ').title()}</span>
                    <span class="theme-confidence">{confidence:.1f}</span>
                </div>
                <div class="theme-evidence">{html.escape(evidence)}</div>
            </div>
            '''
        
        return f'''
        <div class="section">
            <h2>üé≠ Themes</h2>
            <div class="themes-container">
                {themes_html}
            </div>
        </div>
        '''
    
    def _generate_visual_tone_section(self, visual_tone_data: Dict) -> str:
        """Generate visual tone section"""
        if not visual_tone_data:
            return '<div class="section"><h2>üé® Visual Tone</h2><p>No visual tone data</p></div>'
        
        primary_tone = visual_tone_data.get('primary', 'neutral')
        confidence = visual_tone_data.get('confidence', 0)
        indicators = visual_tone_data.get('all_indicators', {})
        
        indicators_html = ''
        for indicator, count in indicators.items():
            indicators_html += f'<span class="tone-indicator">{indicator} ({count})</span>'
        
        return f'''
        <div class="section">
            <h2>üé® Visual Tone</h2>
            <div class="tone-primary">
                <span class="tone-name">{primary_tone.title()}</span>
                <span class="tone-confidence">Confidence: {confidence:.1f}</span>
            </div>
            <div class="tone-indicators">
                {indicators_html}
            </div>
        </div>
        '''
    
    def _generate_provenance_section(self, provenance_data: Dict) -> str:
        """Generate provenance section"""
        if not provenance_data:
            return '<div class="section"><h2>üìç Provenance</h2><p>No provenance data</p></div>'
        
        sources = provenance_data.get('sources', {})
        file_types = provenance_data.get('file_types', {})
        total_items = provenance_data.get('total_items', 0)
        
        sources_html = ''
        for source, count in sources.items():
            sources_html += f'<li>{source}: {count}</li>'
        
        types_html = ''
        for file_type, count in file_types.items():
            types_html += f'<li>{file_type}: {count}</li>'
        
        return f'''
        <div class="section">
            <h2>üìç Provenance</h2>
            <div class="provenance-grid">
                <div class="provenance-group">
                    <h4>Sources</h4>
                    <ul>{sources_html}</ul>
                </div>
                <div class="provenance-group">
                    <h4>File Types</h4>
                    <ul>{types_html}</ul>
                </div>
            </div>
            <div class="section-meta">
                <small>Total items processed: {total_items}</small>
            </div>
        </div>
        '''
    
    def _generate_source_items_section(self, source_items: List) -> str:
        """Generate collapsible source items section"""
        if not source_items:
            return '<div class="section"><h2>üìÅ Source Items</h2><p>No source items available</p></div>'
        
        items_html = ''
        for i, item in enumerate(source_items[:10]):  # Show first 10
            filename = item.get('filename', 'Unknown')
            item_type = item.get('type', 'unknown')
            title = item.get('title', filename)
            
            items_html += f'''
            <div class="source-item">
                <div class="source-item-header">
                    <span class="source-filename">{html.escape(filename)}</span>
                    <span class="source-type">{item_type}</span>
                </div>
                <div class="source-title">{html.escape(title)}</div>
            </div>
            '''
        
        remaining = len(source_items) - 10
        if remaining > 0:
            items_html += f'<div class="source-more">... and {remaining} more items</div>'
        
        return f'''
        <div class="section source-items-section">
            <div class="source-items-header">
                <h2>üìÅ Source Items</h2>
                <button class="toggle-button" onclick="toggleSourceItems()">üîΩ Show Source Items</button>
            </div>
            <div id="source-items-content" class="source-items-content" style="display: none;">
                {items_html}
            </div>
        </div>
        '''
    
    def _save_html(self, html_content: str, output_path: str) -> str:
        """Save HTML content to file"""
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w') as f:
            f.write(html_content)
        
        return str(output_file)
    
    def _get_css_styles(self) -> str:
        """Get CSS styles for the preview"""
        return '''
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            line-height: 1.6;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem 1rem;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            font-weight: 700;
        }
        
        .metadata {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .metadata-item {
            background: rgba(255,255,255,0.1);
            padding: 0.75rem;
            border-radius: 8px;
            backdrop-filter: blur(10px);
        }
        
        .sections-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            padding: 2rem;
        }
        
        .section {
            background: #f8fafc;
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid #e2e8f0;
        }
        
        .section h2 {
            color: #2d3748;
            margin-bottom: 1rem;
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .section-meta {
            margin-top: 1rem;
            color: #64748b;
            font-size: 0.875rem;
        }
        
        /* Colors */
        .colors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
        }
        
        .color-item {
            text-align: center;
        }
        
        .color-chip {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            margin: 0 auto 0.5rem;
            cursor: pointer;
            border: 2px solid #e2e8f0;
            transition: transform 0.2s ease;
        }
        
        .color-chip:hover {
            transform: scale(1.05);
        }
        
        .color-hex {
            font-weight: 600;
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
        }
        
        .color-stats {
            font-size: 0.75rem;
            color: #64748b;
        }
        
        .color-stats span {
            display: block;
        }
        
        /* Palettes */
        .palettes-container {
            space-y: 1rem;
        }
        
        .palette-item {
            margin-bottom: 1rem;
        }
        
        .palette-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .palette-name {
            font-weight: 600;
        }
        
        .palette-harmony {
            font-size: 0.75rem;
            background: #e2e8f0;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
        }
        
        .palette-confidence {
            font-size: 0.75rem;
            color: #64748b;
        }
        
        .palette-colors {
            display: flex;
            gap: 0.25rem;
        }
        
        .palette-color {
            width: 30px;
            height: 30px;
            border-radius: 6px;
            cursor: pointer;
            border: 1px solid #e2e8f0;
        }
        
        /* Tags */
        .tags-cloud {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .tag {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            background: #e2e8f0;
            color: #2d3748;
            font-size: 0.875rem;
            cursor: default;
        }
        
        .tag-large {
            background: #667eea;
            color: white;
            font-weight: 600;
        }
        
        .tag-medium {
            background: #a78bfa;
            color: white;
        }
        
        .tag-small {
            background: #e2e8f0;
        }
        
        /* Objects */
        .objects-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .object-tag {
            background: #fef3c7;
            color: #92400e;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 500;
        }
        
        /* Themes */
        .theme-item {
            border-left: 4px solid #667eea;
            padding-left: 1rem;
            margin-bottom: 1rem;
        }
        
        .theme-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }
        
        .theme-name {
            font-weight: 600;
            color: #2d3748;
        }
        
        .theme-confidence {
            font-size: 0.875rem;
            color: #64748b;
        }
        
        .theme-evidence {
            font-size: 0.875rem;
            color: #64748b;
            line-height: 1.4;
        }
        
        /* Visual Tone */
        .tone-primary {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding: 1rem;
            background: #f1f5f9;
            border-radius: 8px;
        }
        
        .tone-name {
            font-weight: 600;
            font-size: 1.125rem;
            color: #2d3748;
        }
        
        .tone-indicators {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .tone-indicator {
            background: #e0f2fe;
            color: #0891b2;
            padding: 0.25rem 0.75rem;
            border-radius: 6px;
            font-size: 0.875rem;
        }
        
        /* Provenance */
        .provenance-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        
        .provenance-group ul {
            list-style: none;
            padding: 0;
        }
        
        .provenance-group li {
            padding: 0.25rem 0;
            border-bottom: 1px solid #e2e8f0;
            font-size: 0.875rem;
        }
        
        .provenance-group h4 {
            color: #374151;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        /* Source Items */
        .source-items-section {
            margin: 2rem;
            border-top: 2px solid #e2e8f0;
            padding-top: 2rem;
        }
        
        .source-items-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .toggle-button {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.875rem;
        }
        
        .toggle-button:hover {
            background: #5a67d8;
        }
        
        .source-item {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.5rem;
        }
        
        .source-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        
        .source-filename {
            font-weight: 600;
            color: #2d3748;
        }
        
        .source-type {
            background: #e2e8f0;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
        }
        
        .source-title {
            color: #64748b;
            font-size: 0.875rem;
        }
        
        .source-more {
            text-align: center;
            color: #64748b;
            font-style: italic;
            margin-top: 1rem;
        }
        
        /* Footer */
        .footer {
            background: #f1f5f9;
            padding: 1rem 2rem;
            text-align: center;
            color: #64748b;
            font-size: 0.875rem;
        }
        
        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }
            
            .sections-grid {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .metadata {
                grid-template-columns: 1fr;
            }
            
            .provenance-grid {
                grid-template-columns: 1fr;
            }
        }
        '''


def main():
    parser = argparse.ArgumentParser(description='Generate HTML preview of atoms data')
    parser.add_argument('--atoms', required=True, help='Path to atoms JSON file')
    parser.add_argument('--out', default='ui/atoms_preview.html', help='Output HTML file path')
    
    args = parser.parse_args()
    
    # Validate input file
    if not os.path.exists(args.atoms):
        print(f"Error: Atoms file not found: {args.atoms}")
        return 1
    
    # Generate preview
    generator = AtomsPreviewGenerator()
    
    try:
        output_file = generator.generate_preview(args.atoms, args.out)
        
        print(f"\nüéØ Atoms Preview Generated:")
        print(f"   Input: {args.atoms}")
        print(f"   Output: {output_file}")
        print(f"   Open in browser: file://{os.path.abspath(output_file)}")
        
        return 0
        
    except Exception as e:
        print(f"Error generating atoms preview: {e}")
        return 1


if __name__ == "__main__":
    exit(main())